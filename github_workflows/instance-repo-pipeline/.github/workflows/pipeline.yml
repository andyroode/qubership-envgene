#Important!
#Please use your own runner and docker-images

name: "EnvGene Execution"

run-name: "EnvGene Execution - ${{ github.event.inputs.ENV_NAMES || 'Manual' }}"

permissions:
  actions: read
  contents: write
  pull-requests: write

on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      ENV_NAMES:
        required: true
        type: string
      DEPLOYMENT_TICKET_ID:
        required: false
        default: ""
        type: string
      ENV_TEMPLATE_VERSION:
        required: false
        default: ""
        type: string
      ENV_BUILDER:
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"
      GET_PASSPORT:
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      CMDB_IMPORT:
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

env:
  CI_COMMIT_REF_NAME: ${{ github.ref_name }}
  CI_PROJECT_DIR: ${{ github.workspace }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  GITHUB_USER_EMAIL: 'fake@fake.com'
  GITHUB_USER_NAME: 'envgene'
  GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
  
  # Docker Images
  DOCKER_IMAGE_GCIP: 'ghcr.io/netcracker/qubership-gcip:latest'
  DOCKER_IMAGE_ENVGENE: 'ghcr.io/netcracker/qubership-envgene:feature-cred-rotation'
  DOCKER_IMAGE_EFFECTIVE_SET_GENERATOR: 'ghcr.io/netcracker/qubership-effective-set-generator:latest'

jobs:
  show_environment_variables:
    name: "UI Input Parameters Processing"
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/netcracker/qubership-gcip:latest
      options: --user root
    outputs:
      env_matrix: ${{ steps.matrix-generator.outputs.env_matrix }}
      DEPLOYMENT_TICKET_ID: ${{ env.DEPLOYMENT_TICKET_ID }}
      ENV_NAMES: ${{ env.ENV_NAMES }}
      ENV_BUILDER: ${{ env.ENV_BUILDER }}
      GET_PASSPORT: ${{ env.GET_PASSPORT }}
      CMDB_IMPORT: ${{ env.CMDB_IMPORT }}
      GENERATE_EFFECTIVE_SET: ${{ env.GENERATE_EFFECTIVE_SET }}
      ENV_TEMPLATE_VERSION: ${{ env.ENV_TEMPLATE_VERSION }}
      ENV_TEMPLATE_TEST: ${{ env.ENV_TEMPLATE_TEST }}
      ENV_INVENTORY_INIT: ${{ env.ENV_INVENTORY_INIT }}
      ENV_TEMPLATE_NAME: ${{ env.ENV_TEMPLATE_NAME }}
      SD_DATA: ${{ env.SD_DATA }}
      SD_VERSION: ${{ env.SD_VERSION }}
      SD_SOURCE_TYPE: ${{ env.SD_SOURCE_TYPE }}
      SD_DELTA: ${{ env.SD_DELTA }}
      ENV_SPECIFIC_PARAMETERS: ${{ env.ENV_SPECIFIC_PARAMETERS }}
      CRED_ROTATION_PAYLOAD: ${{ env.CRED_ROTATION_PAYLOAD }}
      CRED_ROTATION_FORCE: ${{ env.CRED_ROTATION_FORCE }}
      ENV_GENERATION_PARAMS: ${{ steps.env-generation-params.outputs.ENV_GENERATION_PARAMS }}
      DOCKER_IMAGE_GCIP: ${{ steps.docker-images.outputs.DOCKER_IMAGE_GCIP }}
      DOCKER_IMAGE_ENVGENE: ${{ steps.docker-images.outputs.DOCKER_IMAGE_ENVGENE }}
      DOCKER_IMAGE_EFFECTIVE_SET_GENERATOR: ${{ steps.docker-images.outputs.DOCKER_IMAGE_EFFECTIVE_SET_GENERATOR }}

    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Set Docker Images
        id: docker-images
        run: |
          echo "DOCKER_IMAGE_GCIP=${{ env.DOCKER_IMAGE_GCIP }}" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE_ENVGENE=${{ env.DOCKER_IMAGE_ENVGENE }}" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE_EFFECTIVE_SET_GENERATOR=${{ env.DOCKER_IMAGE_EFFECTIVE_SET_GENERATOR }}" >> $GITHUB_OUTPUT

      - name: Set variables from inputs and pipeline_vars.yaml
        run: |
          # Set variables from workflow inputs
          echo "DEPLOYMENT_TICKET_ID=${{ github.event.inputs.DEPLOYMENT_TICKET_ID }}" >> $GITHUB_ENV
          echo "ENV_NAMES=${{ github.event.inputs.ENV_NAMES }}" >> $GITHUB_ENV
          echo "ENV_BUILDER=${{ github.event.inputs.ENV_BUILDER }}" >> $GITHUB_ENV
          echo "GET_PASSPORT=${{ github.event.inputs.GET_PASSPORT }}" >> $GITHUB_ENV
          echo "CMDB_IMPORT=${{ github.event.inputs.CMDB_IMPORT }}" >> $GITHUB_ENV
          echo "ENV_TEMPLATE_VERSION=${{ github.event.inputs.ENV_TEMPLATE_VERSION }}" >> $GITHUB_ENV
          
          # Load additional variables from pipeline_vars.yaml (with fallbacks to defaults)
          python .github/scripts/load_env_variables.py .github/pipeline_vars.yaml

      - name: Create ENV_GENERATION_PARAMS
        id: env-generation-params
        run: |
          ENV_GENERATION_PARAMS=$(jq -nc \
            --arg sd_source_type "${SD_SOURCE_TYPE:-""}" \
            --arg sd_version "${SD_VERSION:-""}" \
            --arg sd_data "${SD_DATA:-"{}"}" \
            --arg sd_delta "${SD_DELTA:-""}" \
            --arg env_specific_params "${ENV_SPECIFIC_PARAMETERS:-""}" \
            --arg env_template_name "${ENV_TEMPLATE_NAME:-""}" \
            '{
              "SD_SOURCE_TYPE": $sd_source_type,
              "SD_VERSION": $sd_version,
              "SD_DATA": $sd_data,
              "SD_DELTA": $sd_delta,
              "ENV_SPECIFIC_PARAMETERS": $env_specific_params,
              "ENV_TEMPLATE_NAME": $env_template_name
            }'
          )
          echo "ENV_GENERATION_PARAMS=$ENV_GENERATION_PARAMS" >> $GITHUB_OUTPUT
          echo "ENV_GENERATION_PARAMS=$ENV_GENERATION_PARAMS" >> $GITHUB_ENV
          
          # Set all variables in outputs for downstream jobs (same order as API workflow)
          echo "ENV_INVENTORY_INIT=$ENV_INVENTORY_INIT" >> $GITHUB_OUTPUT
          echo "GENERATE_EFFECTIVE_SET=$GENERATE_EFFECTIVE_SET" >> $GITHUB_OUTPUT
          echo "ENV_TEMPLATE_TEST=$ENV_TEMPLATE_TEST" >> $GITHUB_OUTPUT
          echo "ENV_TEMPLATE_NAME=$ENV_TEMPLATE_NAME" >> $GITHUB_OUTPUT
          echo "SD_DATA=$SD_DATA" >> $GITHUB_OUTPUT
          echo "SD_VERSION=$SD_VERSION" >> $GITHUB_OUTPUT
          echo "SD_SOURCE_TYPE=$SD_SOURCE_TYPE" >> $GITHUB_OUTPUT
          echo "SD_DELTA=$SD_DELTA" >> $GITHUB_OUTPUT
          echo "ENV_SPECIFIC_PARAMETERS=$ENV_SPECIFIC_PARAMETERS" >> $GITHUB_OUTPUT
          echo "CRED_ROTATION_PAYLOAD=$CRED_ROTATION_PAYLOAD" >> $GITHUB_OUTPUT
          echo "CRED_ROTATION_FORCE=$CRED_ROTATION_FORCE" >> $GITHUB_OUTPUT
          echo "ENV_TEMPLATE_VERSION=$ENV_TEMPLATE_VERSION" >> $GITHUB_OUTPUT
          echo "ENV_BUILDER=$ENV_BUILDER" >> $GITHUB_OUTPUT
          echo "GET_PASSPORT=$GET_PASSPORT" >> $GITHUB_OUTPUT
          echo "CMDB_IMPORT=$CMDB_IMPORT" >> $GITHUB_OUTPUT
          echo "DEPLOYMENT_TICKET_ID=$DEPLOYMENT_TICKET_ID" >> $GITHUB_OUTPUT

      - name: UI Input Parameters
        run: |
          echo "ðŸš€ === Pipeline Execution Information (UI Mode) ==="
          echo "Event Type: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Trigger: Manual workflow dispatch (UI)"
          echo "Parameters source: Manual inputs + pipeline_vars.yaml"
          echo ""
          echo "=== Docker Images ==="
          echo "DOCKER_IMAGE_GCIP = $DOCKER_IMAGE_GCIP"
          echo "DOCKER_IMAGE_ENVGENE = $DOCKER_IMAGE_ENVGENE"
          echo "DOCKER_IMAGE_EFFECTIVE_SET_GENERATOR = $DOCKER_IMAGE_EFFECTIVE_SET_GENERATOR"
          echo ""
          echo "=== Pipeline Configuration ==="
          echo "DEPLOYMENT_TICKET_ID = $DEPLOYMENT_TICKET_ID"
          echo "ENV_NAMES = $ENV_NAMES"
          echo "ENV_INVENTORY_INIT = $ENV_INVENTORY_INIT"
          echo "ENV_BUILDER = $ENV_BUILDER"
          echo "GENERATE_EFFECTIVE_SET = $GENERATE_EFFECTIVE_SET"
          echo "CMDB_IMPORT = $CMDB_IMPORT"
          echo "GET_PASSPORT = $GET_PASSPORT"
          echo "ENV_TEMPLATE_VERSION = $ENV_TEMPLATE_VERSION"
          echo "ENV_TEMPLATE_TEST = $ENV_TEMPLATE_TEST"
          echo "ENV_TEMPLATE_NAME = $ENV_TEMPLATE_NAME"
          echo "SD_DATA = $SD_DATA"
          echo "SD_VERSION = $SD_VERSION"
          echo "SD_SOURCE_TYPE = $SD_SOURCE_TYPE"
          echo "SD_DELTA = $SD_DELTA"
          echo "ENV_SPECIFIC_PARAMETERS = $ENV_SPECIFIC_PARAMETERS"
          echo "CRED_ROTATION_PAYLOAD = $CRED_ROTATION_PAYLOAD"
          echo "CRED_ROTATION_FORCE = $CRED_ROTATION_FORCE"
          
      - name: Prepare Parameters
        id: matrix-generator
        shell: bash
        run: |
          arr="["
          first=1
          for name in $(echo "$ENV_NAMES" | tr ',' ' '); do
            if [ "$first" = 1 ]; then
              first=0
            else
              arr="$arr,"
            fi
            arr="$arr\"$name\""
          done
          arr="$arr]"
          
          echo "env_matrix=$arr" >> $GITHUB_OUTPUT    

  parameters_validation:
    name: "${{ matrix.environment }} - Parameters Validation"
    runs-on: ubuntu-22.04
    needs: show_environment_variables
    container:
      image: ${{ needs.show_environment_variables.outputs.DOCKER_IMAGE_GCIP }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: EnvGene parameters validation
        run: |
          ENV_NAMES="${{ matrix.environment }}"
          export ENV_NAMES
          python /module/scripts/github_actions.py validate_pipeline

  generate_inventory:
    name: "${{ matrix.environment }} - Generate Inventory"
    runs-on: ubuntu-22.04
    if: always() && needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST == 'false' && (needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '{}' && needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '' || needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME != '')
    needs:
      - parameters_validation
      - show_environment_variables
    container:
      image: ${{ needs.show_environment_variables.outputs.DOCKER_IMAGE_ENVGENE }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      FULL_ENV: ${{ matrix.environment }}
      SD_SOURCE_TYPE: ${{ needs.show_environment_variables.outputs.SD_SOURCE_TYPE }}
      SD_VERSION: ${{ needs.show_environment_variables.outputs.SD_VERSION }}
      SD_DATA: ${{ needs.show_environment_variables.outputs.SD_DATA }}
      SD_DELTA: ${{ needs.show_environment_variables.outputs.SD_DELTA }}
      ENV_INVENTORY_INIT: ${{ needs.show_environment_variables.outputs.ENV_INVENTORY_INIT }}
      ENV_SPECIFIC_PARAMETERS: ${{ needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS }}
      ENV_TEMPLATE_NAME: ${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME }}
      ENV_TEMPLATE_VERSION: ${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_VERSION }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Prepare variables to work with artifacts
        run: |
          echo "SANITIZED_NAME=$(echo "${{ matrix.environment }}" | sed 's|/|_|g')" >> $GITHUB_ENV
          echo "PROJECT_DIR=$(pwd)" >> $GITHUB_ENV

      - name: Generate inventory
        run: |
          CLUSTER_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f1)
          export CLUSTER_NAME
          
          ENVIRONMENT_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f2 | xargs)
          export ENVIRONMENT_NAME
          
          ENV_NAME="$ENVIRONMENT_NAME"
          export ENV_NAME
          
          # Use ENV_GENERATION_PARAMS from show_environment_variables job
          ENV_GENERATION_PARAMS='${{ needs.show_environment_variables.outputs.ENV_GENERATION_PARAMS }}'
          export ENV_GENERATION_PARAMS
          
          python3 /build_env/scripts/build_env/env_inventory_generation.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generate_inventory_${{ env.SANITIZED_NAME }}
          path: ${{ github.workspace }}/environments/${{ env.FULL_ENV }}

  credential_rotation:
    name: "${{ matrix.environment }} - Credential Rotation"
    runs-on: ubuntu-22.04
    if: always() && needs.show_environment_variables.outputs.CRED_ROTATION_PAYLOAD != '{}'
    needs:
      - parameters_validation
      - show_environment_variables
      - generate_inventory
    container:
      image: ${{ needs.show_environment_variables.outputs.DOCKER_IMAGE_ENVGENE }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      FULL_ENV: ${{ matrix.environment }}
      CRED_ROTATION_PAYLOAD: ${{ needs.show_environment_variables.outputs.CRED_ROTATION_PAYLOAD }}
      CRED_ROTATION_FORCE: ${{ needs.show_environment_variables.outputs.CRED_ROTATION_FORCE }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Prepare variables to download the artifacts
        run: |
          echo "SANITIZED_NAME=$(echo "${{ matrix.environment }}" | sed 's|/|_|g')" >> $GITHUB_ENV
          echo "PROJECT_DIR=$(pwd)" >> $GITHUB_ENV

      - name: Create the naming for artifact
        run: |
          if [ "${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST }}" = "false" ] && ([ "${{ needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS }}" != "{}" ] && [ "${{ needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS }}" != "" ] || [ "${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME }}" != "" ]); then
            echo "artifact_name=credential_rotation_${{ env.SANITIZED_NAME }}" >> $GITHUB_ENV
          fi

      - name: Credential Rotation
        run: |          
          export CLUSTER_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f1)
          export ENV_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f2 | xargs)              
          
          CRED_ROTATION_FORCE="${{ needs.show_environment_variables.outputs.CRED_ROTATION_FORCE }}"
          export CRED_ROTATION_FORCE
          
          CRED_ROTATION_PAYLOAD="${{ needs.show_environment_variables.outputs.CRED_ROTATION_PAYLOAD }}"
          export CRED_ROTATION_PAYLOAD
          
          export ENVGENE_AGE_PRIVATE_KEY
          export ENVGENE_AGE_PUBLIC_KEY
          export PUBLIC_AGE_KEYS
          
          python3 /module/creds_rotation_scripts/creds_rotation_handler.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: credential_rotation_${{ env.SANITIZED_NAME }}
          path: |
            ${{ github.workspace }}/environments/${{ env.FULL_ENV }}
            ${{ github.workspace }}/affected-sensitive-parameters.yaml

  env_build:
    name: "${{ matrix.environment }} - Env Build"
    if: always() && needs.show_environment_variables.outputs.ENV_BUILDER == 'true'
    runs-on: ubuntu-22.04
    needs:
      - parameters_validation
      - show_environment_variables
      - generate_inventory
      - credential_rotation
    container:
      image: ${{ needs.show_environment_variables.outputs.DOCKER_IMAGE_ENVGENE }}
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      FULL_ENV: ${{ matrix.environment }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Prepare variables to download the artifacts
        run: |
          echo "SANITIZED_NAME=$(echo "${{ matrix.environment }}" | sed 's|/|_|g')" >> $GITHUB_ENV
          echo "PROJECT_DIR=$(pwd)" >> $GITHUB_ENV

      - name: Create the naming for artifact
        run: |
          if [ "${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST }}" = "false" ] && ([ "${{ needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS }}" != "{}" ] && [ "${{ needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS }}" != "" ] || [ "${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME }}" != "" ]); then
            echo "artifact_name=generate_inventory_${{ env.SANITIZED_NAME }}" >> $GITHUB_ENV
          fi

      - name: Download artifact
        if: needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST == 'false' && (needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '{}' && needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '' || needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME != '')
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ./downloaded_artifact

      - name: Extract artifact to environment directory
        if: needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST == 'false' && (needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '{}' && needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '' || needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME != '')
        run: |
          mkdir -p "${{ env.PROJECT_DIR }}/environments/${{ env.FULL_ENV }}/"
          cp -rf ./downloaded_artifact/* "${{ env.PROJECT_DIR }}/environments/${{ env.FULL_ENV }}/"
          rm -rf ./downloaded_artifact

      - name: Build Env
        run: |
          ENV_NAMES="${{ matrix.environment }}"
          export ENV_NAMES
          
          ENV_NAME_SHORT=$(echo "$ENV_NAME" | awk -F "/" '{print $NF}')
          export ENV_NAME_SHORT
          
          ENV_TEMPLATE_TEST="${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST }}"
          export ENV_TEMPLATE_TEST
          
          CLUSTER_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f1)
          export CLUSTER_NAME
          
          ENVIRONMENT_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f2 | xargs)
          export ENVIRONMENT_NAME
          
          ENV_NAME="$ENVIRONMENT_NAME"
          export ENV_NAME
          
          export CI_PROJECT_DIR
          
          ENV_TEMPLATE_VERSION="${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_VERSION }}"
          export ENV_TEMPLATE_VERSION
          
          INSTANCES_DIR="${CI_PROJECT_DIR}/environments"
          export INSTANCES_DIR
          
          module_ansible_dir="/module/ansible"
          export module_ansible_dir
          
          module_inventory="${CI_PROJECT_DIR}/configuration/inventory.yaml"
          export module_inventory
          
          module_ansible_cfg="/module/ansible/ansible.cfg"
          export module_ansible_cfg
          
          module_config_default="/module/templates/defaults.yaml"
          export module_config_default
          
          envgen_args=" -vvv"
          export envgen_args
          
          envgen_debug="true"
          export envgen_debug
          
          GIT_STRATEGY="none"
          export GIT_STRATEGY
          
          COMMIT_ENV="true"
          export COMMIT_ENV
          
          export SECRET_KEY
          export GITHUB_ACTIONS
          export GITHUB_REPOSITORY
          export GITHUB_REF_NAME
          export GITHUB_USER_EMAIL
          export GITHUB_USER_NAME
          export GITHUB_TOKEN
          
          if [ -d "${CI_PROJECT_DIR}/configuration/certs" ]; then
          env_path=$(ls -A "${CI_PROJECT_DIR}/configuration/certs");
          for path in $env_path; do bash /module/scripts/update_ca_cert.sh ${CI_PROJECT_DIR}/configuration/certs/$path; done; fi
    
          if [ "$ENV_TEMPLATE_VERSION" != "" ] && [ "$ENV_TEMPLATE_TEST" == "false" ]; then
            /module/scripts/prepare.sh "set_template_version.yaml"
            /module/scripts/prepare.sh "build_env.yaml"
          else
            /module/scripts/prepare.sh "build_env.yaml"
          fi
    
          if [ "$ENV_TEMPLATE_TEST" == "true" ]; then
            env_name=$(cat set_variable.txt)
            sed -i "s|\\\"envgeneNullValue\\\"|\\\"test_value\\\"|g" "${CI_PROJECT_DIR}/environments/$env_name/Credentials/credentials.yml"
          else
            env_name=$(echo "$ENV_NAME" | awk -F "/" '{print $NF}')
            export env_name
          fi
    
          env_path=$(find "${CI_PROJECT_DIR}/environments" -type d -name "$env_name")
          for path in $env_path; do
            if [ -d "$path/Credentials" ]; then
              chmod ugo+rw "$path/Credentials/"*
            fi
          done
          
      

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: env_build_${{ env.SANITIZED_NAME }}
          path: ${{ github.workspace }}/environments/${{ env.FULL_ENV }}

  generate_effective_set:
    name: "${{ matrix.environment }} - Generate Effective Set"
    if: always() && needs.show_environment_variables.outputs.GENERATE_EFFECTIVE_SET == 'true'
    runs-on: ubuntu-22.04
    needs: [parameters_validation,show_environment_variables,generate_inventory,env_build]
    container:
      image: ${{ needs.show_environment_variables.outputs.DOCKER_IMAGE_EFFECTIVE_SET_GENERATOR }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      FULL_ENV: ${{ matrix.environment }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Prepare variables to work with artifacts
        run: |
          echo "SANITIZED_NAME=$(echo "${{ matrix.environment }}" | sed 's|/|_|g')" >> $GITHUB_ENV
          echo "PROJECT_DIR=$(pwd)" >> $GITHUB_ENV
          
      - name: Create the naming for artifact
        run: |
          if [ "${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST }}" = "false" ] && ([ "${{ needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS }}" != "{}" ] && [ "${{ needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS }}" != "" ] || [ "${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME }}" != "" ]); then
            echo "artifact_name=generate_inventory_${{ env.SANITIZED_NAME }}" >> $GITHUB_ENV
          fi
          if [ "${{ needs.show_environment_variables.outputs.ENV_BUILDER }}" = "true" ]; then
            echo "artifact_name=env_build_${{ env.SANITIZED_NAME }}" >> $GITHUB_ENV
          fi

      - name: Download artifact
        if: (needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST == 'false' && (needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '{}' && needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '' || needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME != '')) || needs.show_environment_variables.outputs.ENV_BUILDER == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ./downloaded_artifact

      - name: Extract artifact to environment directory
        if: (needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST == 'false' && (needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '{}' && needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '' || needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME != '')) || needs.show_environment_variables.outputs.ENV_BUILDER == 'true'
        run: |
          mkdir -p "${{ env.PROJECT_DIR }}/environments/${{ env.FULL_ENV }}/"
          cp -rf ./downloaded_artifact/* "${{ env.PROJECT_DIR }}/environments/${{ env.FULL_ENV }}/"
          rm -rf ./downloaded_artifact

      - name: Generate Effective Set
        run: |
          
          ENV_NAMES="${{ matrix.environment }}"
          export ENV_NAMES
          
          ENV_NAME_SHORT=$(echo "$ENV_NAME" | awk -F "/" '{print $NF}')
          export ENV_NAME_SHORT
          
          export ENV_TEMPLATE_TEST
          
          CLUSTER_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f1)
          export CLUSTER_NAME
          
          ENVIRONMENT_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f2 | xargs)
          export ENVIRONMENT_NAME
          
          ENV_NAME="$ENVIRONMENT_NAME"
          export ENV_NAME
          
          export CI_PROJECT_DIR
          
          export ENV_TEMPLATE_VERSION
          
          INSTANCES_DIR="${CI_PROJECT_DIR}/environments"
          export INSTANCES_DIR
          
          module_ansible_dir="/module/ansible"
          export module_ansible_dir
          
          module_inventory="${CI_PROJECT_DIR}/configuration/inventory.yaml"
          export module_inventory
          
          module_ansible_cfg="/module/ansible/ansible.cfg"
          export module_ansible_cfg
          
          module_config_default="/module/templates/defaults.yaml"
          export module_config_default
          
          envgen_args=" -vvv"
          export envgen_args
          
          envgen_debug="true"
          export envgen_debug
          
          GIT_STRATEGY="none"
          export GIT_STRATEGY
          
          COMMIT_ENV="true"
          export COMMIT_ENV
          
          export SECRET_KEY
          export GITHUB_ACTIONS
          export GITHUB_REPOSITORY
          export GITHUB_REF_NAME
          export GITHUB_USER_EMAIL
          export GITHUB_USER_NAME
          export GITHUB_TOKEN
          
          /module/scripts/prepare.sh "generate_effective_set.yaml"
          
          env_path=$(find "${CI_PROJECT_DIR}/environments" -type d -name "$env_name")
          for path in $env_path; do
            if [ -d "$path/Credentials" ]; then
              chmod ugo+rw "$path/Credentials/"*
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generate_effective_set_${{ env.SANITIZED_NAME }}
          path: ${{ github.workspace }}/environments/${{ env.FULL_ENV }}

  git_commit:
    name: "${{ matrix.environment }} - Git Commit"
    runs-on: ubuntu-22.04
    needs: [parameters_validation,show_environment_variables,generate_inventory,env_build,generate_effective_set]
    if: always() && (needs.show_environment_variables.outputs.ENV_INVENTORY_INIT == 'true' || needs.show_environment_variables.outputs.ENV_BUILDER == 'true' || needs.show_environment_variables.outputs.GENERATE_EFFECTIVE_SET == 'true')
    container:
      image: ${{ needs.show_environment_variables.outputs.DOCKER_IMAGE_ENVGENE }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      FULL_ENV: ${{ matrix.environment }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Prepare variables to work with artifacts
        run: |
          echo "SANITIZED_NAME=$(echo "${{ matrix.environment }}" | sed 's|/|_|g')" >> $GITHUB_ENV
          echo "PROJECT_DIR=$(pwd)" >> $GITHUB_ENV
          
      - name: Create the naming for artifact
        run: |
          if [ "${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST }}" = "false" ] && ([ "${{ needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS }}" != "{}" ] && [ "${{ needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS }}" != "" ] || [ "${{ needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME }}" != "" ]); then
            echo "artifact_name=generate_inventory_${{ env.SANITIZED_NAME }}" >> $GITHUB_ENV
          fi
          if [ "${{ needs.show_environment_variables.outputs.ENV_BUILDER }}" = "true" ]; then
            echo "artifact_name=env_build_${{ env.SANITIZED_NAME }}" >> $GITHUB_ENV
          fi
          if [ "${{ needs.show_environment_variables.outputs.GENERATE_EFFECTIVE_SET }}" = "true" ]; then
            echo "artifact_name=generate_effective_set_${{ env.SANITIZED_NAME }}" >> $GITHUB_ENV
          fi

      - name: Download artifact
        if: (needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST == 'false' && (needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '{}' && needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '' || needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME != '')) || needs.show_environment_variables.outputs.ENV_BUILDER == 'true' || needs.show_environment_variables.outputs.GENERATE_EFFECTIVE_SET == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ./downloaded_artifact

      - name: Extract artifact to environment directory
        if: (needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST == 'false' && (needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '{}' && needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '' || needs.show_environment_variables.outputs.ENV_TEMPLATE_NAME != '')) || needs.show_environment_variables.outputs.ENV_BUILDER == 'true' || needs.show_environment_variables.outputs.GENERATE_EFFECTIVE_SET == 'true'
        run: |
          mkdir -p "${{ env.PROJECT_DIR }}/environments/${{ env.FULL_ENV }}/"
          cp -rf ./downloaded_artifact/* "${{ env.PROJECT_DIR }}/environments/${{ env.FULL_ENV }}/"
          rm -rf ./downloaded_artifact

      - name: Git Commit
        run: |
          ENV_NAME_SHORT=$(echo "$ENV_NAME" | awk -F "/" '{print $NF}')
          export ENV_NAME_SHORT
          
          export ENV_TEMPLATE_TEST
          
          CLUSTER_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f1)
          export CLUSTER_NAME
          
          ENVIRONMENT_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f2 | xargs)
          export ENVIRONMENT_NAME
          
          ENV_NAME="$ENVIRONMENT_NAME"
          export ENV_NAME
          
          export CI_PROJECT_DIR
          
          export ENV_TEMPLATE_VERSION
          
          INSTANCES_DIR="${CI_PROJECT_DIR}/environments"
          export INSTANCES_DIR
          
          module_ansible_dir="/module/ansible"
          export module_ansible_dir
          
          module_inventory="${CI_PROJECT_DIR}/configuration/inventory.yaml"
          export module_inventory
          
          module_ansible_cfg="/module/ansible/ansible.cfg"
          export module_ansible_cfg
          
          module_config_default="/module/templates/defaults.yaml"
          export module_config_default
          
          envgen_args=" -vvv"
          export envgen_args
          
          envgen_debug="true"
          export envgen_debug
          
          GIT_STRATEGY="none"
          export GIT_STRATEGY
          
          COMMIT_ENV="true"
          export COMMIT_ENV
          
          export SECRET_KEY
          export GITHUB_ACTIONS
          export GITHUB_REPOSITORY
          export GITHUB_REF_NAME
          export GITHUB_USER_EMAIL
          export GITHUB_USER_NAME
          export GITHUB_TOKEN
                    
          echo "Prepare git_commit job for ${ENVIRONMENT_NAME}..."

          if [ -d "${CI_PROJECT_DIR}/configuration/certs" ]; then
            env_path=$(ls -A "${CI_PROJECT_DIR}/configuration/certs")
            for path in $env_path; do 
              bash /module/scripts/update_ca_cert.sh "${CI_PROJECT_DIR}/configuration/certs/$path"
            done
          fi
          
          git config --global --add safe.directory "${CI_PROJECT_DIR}"
            
          /module/scripts/prepare.sh "git_commit.yaml"
          
          env_path=$(find "${CI_PROJECT_DIR}/environments" -type d -name "$env_name")
          for path in $env_path; do
            if [ -d "$path/Credentials" ]; then
              chmod ugo+rw "$path/Credentials/"*
            fi
          done
      
          cp -rf ${CI_PROJECT_DIR}/environments ${CI_PROJECT_DIR}/git_envs

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: git_commit_${{ env.SANITIZED_NAME }}
          path: ${{ github.workspace }}/git_envs
